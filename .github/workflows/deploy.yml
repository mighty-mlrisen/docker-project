name: Deploy

on:
  push:
    branches: [ "master" ]
  
env:
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/python-crud:latest
  ACTIONS_STEP_DEBUG: true

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: kubsu
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.dev
          tags: ${{ vars.DOCKERHUB_USERNAME }}/python-crud-dev:latest
          load: true

      - name: Run tests
        run: |
          docker run --rm --network=host ${{ vars.DOCKERHUB_USERNAME }}/python-crud-dev:latest


  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ env.IMAGE_NAME }}

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Deploy with Podman
        run: |
          podman system migrate || true

          podman login -u ${{ vars.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} docker.io

          # Stop and remove existing container if it exists
          podman stop python-crud || true
          podman rm --force python-crud || true

          # Remove existing image if it exists
          podman rmi ${{ env.IMAGE_NAME }} || true

          # Pull new image from Docker Hub
          podman pull ${{ env.IMAGE_NAME }}

          # Run new container
          podman run -d --name python-crud --network host ${{ env.IMAGE_NAME }}

          echo "Container has been deployed successfully!"